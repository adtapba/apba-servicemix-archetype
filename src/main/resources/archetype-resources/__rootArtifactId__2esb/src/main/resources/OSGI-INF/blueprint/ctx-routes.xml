#set( $symbol_dollar = '$' )
#set( $camelContextFirstCharacter = ${systemCodeCamelCase.substring(0, 1).toUpperCase()} )
#set( $camelContextRestCharacters = ${systemCodeCamelCase.substring(1)} )
#set( $camelContext = ${camelContextFirstCharacter.concat(${camelContextRestCharacters})} )
<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.2.0"
           xmlns:enc="http://karaf.apache.org/xmlns/jasypt/v1.0.0"
           xsi:schemaLocation="
            http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
            http://camel.apache.org/schema/blueprint  http://camel.apache.org/schema/blueprint/camel-blueprint.xsd
            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
            http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.2.0 http://aries.apache.org/schemas/blueprint-cm/blueprint-cm-1.2.0.xsd">

    <!-- Config properties -->
    <cm:property-placeholder persistent-id="${groupId}.${artifactId}" update-strategy="reload"/>
    
    <enc:property-placeholder>
        <enc:encryptor class="org.jasypt.encryption.pbe.StandardPBEStringEncryptor">
            <property name="config">
                <bean class="org.jasypt.encryption.pbe.config.EnvironmentStringPBEConfig">
                    <property name="algorithm" value="PBEWithMD5AndDES" />
                    <property name="passwordEnvName" value="APBA_JASYPT_ENCRYPTION_PASSWORD" />
                </bean>
            </property>
        </enc:encryptor>
    </enc:property-placeholder>
    
    <!-- ActiveMQ parameterized component -->
    <bean id="activemqConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
        <property name="brokerURL" value="${symbol_dollar}{activemq.brokerURL}"/>
        <property name="userName" value="${symbol_dollar}{activemq.username}"/>
        <property name="password" value="${symbol_dollar}{activemq.password}"/>
    </bean>
    
    <bean id="activemqPooledConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory" init-method="start" destroy-method="stop">
        <property name="connectionFactory" ref="activemqConnectionFactory"/>
        <property name="maxConnections" value="${symbol_dollar}{activemq.maxPoolConnections}"/>
    </bean>
 
    <bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent">
        <property name="connectionFactory" ref="activemqPooledConnectionFactory"/>
    </bean>   
    
    <!-- Repository for published messages keys -->
    <bean id="messageIdsRepo"
          class="org.apache.camel.processor.idempotent.FileIdempotentRepository"
          factory-method="fileIdempotentRepository">
        <argument value="${symbol_dollar}{idempotent.file.repository.lineCrossedEventIds}" />
    </bean>

    <!-- Integration routes -->
    <camelContext id="Ctx${camelContext}2EsbMessageProcessing" xmlns="http://camel.apache.org/schema/blueprint">
                
        <route id="RtLineCrossedEventMessageReception">
            <from uri="direct-vm:LineCrossedEventRestResource_postLineCrossedEvent" />  
            <log loggingLevel="INFO" message="${symbol_dollar}{camelId} - ${symbol_dollar}{routeId} - ${symbol_dollar}{exchangeId} | Message received | PROCESS | apbaTransactionId: ${symbol_dollar}{header.apbaTransactionId}"/>                                      
                   
            <idempotentConsumer messageIdRepositoryRef="messageIdsRepo">
                <header>apbaTransactionId</header>
                <log loggingLevel="INFO" message="${symbol_dollar}{camelId} - ${symbol_dollar}{routeId} - ${symbol_dollar}{exchangeId} | Queuing message for processing ... | PROCESS | apbaTransactionId: ${symbol_dollar}{header.apbaTransactionId}"/>
                <recipientList>
                    <simple>activemq:queue:apba.queue.${systemCodeCamelCase.toLowerCase()}.linecrossedevent?exchangePattern=InOnly</simple>
                </recipientList>
            </idempotentConsumer>
            <choice>
                <when>
                    <simple>${symbol_dollar}{exchangeProperty.CamelDuplicateMessage} == true</simple>
                    <log loggingLevel="INFO" message="${symbol_dollar}{camelId} - ${symbol_dollar}{routeId} - ${symbol_dollar}{exchangeId} | Duplicated message | PROCESS | apbaTransactionId: ${symbol_dollar}{header.apbaTransactionId}"/> 
                </when>
            </choice>
            
            <setBody>
                <simple><![CDATA[{ "result":"CREATED" }]]></simple>
            </setBody>
            <removeHeaders pattern="*" excludePattern="apbaTransactionId" />
            <setHeader headerName="Exchange.HTTP_RESPONSE_CODE">
                <constant>201</constant>
            </setHeader>
            <log loggingLevel="INFO" message="${symbol_dollar}{camelId} - ${symbol_dollar}{routeId} - ${symbol_dollar}{exchangeId} | Message reception finished | OUT | apbaTransactionId: ${symbol_dollar}{header.apbaTransactionId} | httpResponseCodeSent: 201 | ${symbol_dollar}{body}"/> 
        </route>
        
        <route id="RtLineCrossedEventMessagePublishing">
            <from uri="activemq:queue:apba.queue.${systemCodeCamelCase.toLowerCase()}.linecrossedevent" />
            <inOnly uri="activemq:topic:apba.topic.${systemCodeCamelCase.toLowerCase()}.linecrossedevent"/>     
            <log loggingLevel="INFO" message="${symbol_dollar}{camelId} - ${symbol_dollar}{routeId} - ${symbol_dollar}{exchangeId} | Message published | OUT | apbaTransactionId: ${symbol_dollar}{header.apbaTransactionId}"/>           
        </route>
        
    </camelContext>

</blueprint>